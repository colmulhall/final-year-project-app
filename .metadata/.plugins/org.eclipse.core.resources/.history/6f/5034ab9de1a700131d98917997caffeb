/* This is where the events are retrieved from the database and 
 * put into a list for the user to view.
 */

package com.phoenixpark.app;

import java.util.ArrayList;
import java.util.HashMap;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import android.annotation.SuppressLint;
import android.app.ListActivity;
import android.app.ProgressDialog;
import android.content.Intent;
import android.os.AsyncTask;
import android.os.Bundle;
import android.util.Log;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.ListAdapter;
import android.widget.ListView;
import android.widget.SimpleAdapter;
import android.widget.TextView;

public class UserSubmittedList extends ListActivity 
{
	// URL to get contacts JSON
    private static String url = "http://parkdomain.comoj.com/android_get_usersubmitted_titles.php";
 
    // JSON Node names
    private static final String TAG_EVENTS = "user_events";
    private static final String TAG_ID = "id";
    private static final String TAG_TITLE = "title";
    private static final String TAG_LOCATION = "location";
    private static final String TAG_DATE = "date";
 
    // events JSONArray
    JSONArray user_events = null;
 
    // Hashmap for ListView
    ArrayList<HashMap<String, String>> eventList;
 
    @Override
    public void onCreate(Bundle savedInstanceState) 
    {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.usersubmittedlist_layout);
 
        eventList = new ArrayList<HashMap<String, String>>();
 
        ListView lv = getListView();
        
        // Listview on item click listener
        lv.setOnItemClickListener(new OnItemClickListener() 
        {
            @Override
            public void onItemClick(AdapterView<?> parent, View view, int position, long id) 
            {
                // get id from selected ListItem
                String ev_id = ((TextView) view.findViewById(R.id.the_id)).getText().toString();
 
                // Starting single contact activity
                Intent in = new Intent(getApplicationContext(), EventInformation.class);
                in.putExtra(TAG_ID, ev_id);
                startActivity(in);
                overridePendingTransition(R.anim.slide_in_left_to_right, R.anim.slide_out_left_to_right);
            }
        });
 
        // Calling async task to get json
        new GetEvents().execute();
    }
 
    //Async task class to get json by making HTTP call
    private class GetEvents extends AsyncTask<Void, Void, Void> 
    {
    	private ProgressDialog progress;  //progress dialog when loading events
    	
        @Override
        protected void onPreExecute() 
        {
            super.onPreExecute();
            // Showing progress dialog
            progress = ProgressDialog.show(UserSubmittedList.this, "Getting events", "Please Wait...");
        }
 
        @Override
        protected Void doInBackground(Void... arg0) 
        {
            // Creating service handler class instance
            HandleConnections sh = new HandleConnections();
 
            // Making a request to url and getting response
            String jsonStr = sh.makeServiceCall(url, HandleConnections.GET);
 
            Log.d("Response: ", "> " + jsonStr);
 
            if (jsonStr != null) 
            {
                try {
                    JSONObject jsonObj = new JSONObject(jsonStr);
                     
                    // Getting JSON Array node
                    user_events = jsonObj.getJSONArray(TAG_EVENTS);
 
                    // looping through all events
                    for (int i = 0; i < user_events.length(); i++) 
                    {
                        JSONObject c = user_events.getJSONObject(i);
                         
                        String the_title = c.getString(TAG_TITLE);
                        String the_id = c.getString(TAG_ID);
                        String the_date = c.getString(TAG_DATE);
                        String the_location = c.getString(TAG_LOCATION);
 
                        // tmp hashmap for single event
                        HashMap<String, String> event = new HashMap<String, String>();
 
                        // adding each child node to HashMap key => value
                        event.put(TAG_TITLE, the_title);
                        event.put(TAG_ID, the_id);
                        event.put(TAG_LOCATION, the_location);
                        event.put(TAG_DATE, the_date);
 
                        // adding contact to event list
                        eventList.add(event);
                    }
                } catch (JSONException e) {
                    e.printStackTrace();
                }
            } else {
                Log.e("ServiceHandler", "Couldn't get any data from the url");
            }
 
            return null;
        }
 
        @Override
        protected void onPostExecute(Void result) 
        {
            super.onPostExecute(result);
            
            // Dismiss the progress dialog
            progress.dismiss();

            ListAdapter adapter = new SimpleAdapter( UserSubmittedList.this, eventList,
                    R.layout.list_item, new String[] { TAG_TITLE, TAG_ID, TAG_LOCATION, TAG_DATE}, 
                    new int[] {R.id.the_title, R.id.the_id, R.id.the_location, R.id.the_date});
 
            setListAdapter(adapter);
        }
    }
    
  //action bar
    @SuppressLint("NewApi")
	@Override
	public boolean onCreateOptionsMenu(Menu menu) 
	{
    	// Inflate menu resource file.  
        getMenuInflater().inflate(R.menu.usersubmittedlist_menu, menu);

        return true;
	}
    
    //action bar listener
    @Override
    public boolean onOptionsItemSelected(MenuItem item) 
    {
    	int id = item.getItemId();
    	
    	if(id == R.id.submit_event)
    	{
    		// Starting single contact activity
            Intent in = new Intent(getApplicationContext(), SubmitEvent.class);
            startActivity(in);
            overridePendingTransition(R.anim.slidedown_in, R.anim.slidedown_out);  
    	}
        return true;
    }
    
    //back button pressed by user
    @Override
    public void onBackPressed() 
    {
        finish();//go back to the previous Activity
        overridePendingTransition(R.anim.slide_in_left_to_right, R.anim.slide_out_left_to_right);   
    }
    
    @Override
	protected void onResume()
	{
		super.onResume();
		this.onCreate(null); //refresh the activity once it resumes 
	}
}