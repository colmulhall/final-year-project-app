/* This is where the events are retrieved from the database and 
 * put into a list for the user to view.
 */

package com.phoenixpark.app;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;

import org.apache.http.NameValuePair;
import org.apache.http.message.BasicNameValuePair;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import android.annotation.SuppressLint;
import android.app.AlertDialog;
import android.app.ListActivity;
import android.app.ProgressDialog;
import android.content.DialogInterface;
import android.content.Intent;
import android.net.Uri;
import android.os.AsyncTask;
import android.os.Bundle;
import android.util.Log;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.ListAdapter;
import android.widget.ListView;
import android.widget.ShareActionProvider;
import android.widget.SimpleAdapter;
import android.widget.TextView;
import android.widget.Toast;

public class EventList extends ListActivity 
{
	// URLs to get events JSON
    private static String url = "http://parkdomain.comoj.com/android_get_event_titles.php";
    private static String filter_url = "http://parkdomain.comoj.com/android_filter_event_titles.php";
 
    // JSON Node names
    private static final String TAG_EVENTS = "event_list";
    private static final String TAG_ID = "id";
    private static final String TAG_TITLE = "title";
    private static final String TAG_LOCATION = "location";
    private static final String TAG_DATE = "date";
 
    // events JSONArray
    JSONArray events = null;
 
    // Hashmap for ListView
    ArrayList<HashMap<String, String>> eventList;
    
    //filter choice
    String filterby;
    
 
    @Override
    public void onCreate(Bundle savedInstanceState) 
    {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.eventlist_layout);
 
        eventList = new ArrayList<HashMap<String, String>>();
 
        ListView lv = getListView();
        
        // Listview on item click listener
        lv.setOnItemClickListener(new OnItemClickListener() 
        {
            @Override
            public void onItemClick(AdapterView<?> parent, View view, int position, long id) 
            {
                // get id from selected ListItem
                String ev_id = ((TextView) view.findViewById(R.id.the_id)).getText().toString();
 
                // Starting single contact activity
                Intent in = new Intent(getApplicationContext(), EventInformation.class);
                in.putExtra(TAG_ID, ev_id);
                startActivity(in);
                overridePendingTransition(R.anim.slide_in_left_to_right, R.anim.slide_out_left_to_right);
            }
        });
 
        // Calling async task to get json
        new GetEvents().execute();
    }
 
    //Async task class to get json by making HTTP call
    private class GetEvents extends AsyncTask<Void, Void, Void> 
    {
    	private ProgressDialog progress;  //progress dialog when loading events
    	
        @Override
        protected void onPreExecute() 
        {
            super.onPreExecute();
            // Showing progress dialog
            progress = ProgressDialog.show(EventList.this, "Getting events", "Please Wait...");
        }
 
        @Override
        protected Void doInBackground(Void... arg0) 
        {
            // Creating connection handler class instance
            HandleConnections sh = new HandleConnections();
 
            // Making a request to url and getting response
            String jsonStr = sh.makeServiceCall(url, HandleConnections.GET);
 
            if (jsonStr != null) 
            {
                try {
                    JSONObject jsonObj = new JSONObject(jsonStr);
                     
                    // Getting JSON Array node
                    events = jsonObj.getJSONArray(TAG_EVENTS);
 
                    // looping through all events
                    for (int i = 0; i < events.length(); i++) 
                    {
                        JSONObject c = events.getJSONObject(i);
                         
                        String the_id = c.getString(TAG_ID);
                        String the_title = c.getString(TAG_TITLE);
                        String the_date = c.getString(TAG_DATE);
                        String the_location = c.getString(TAG_LOCATION);
 
                        // tmp hashmap for single event
                        HashMap<String, String> event = new HashMap<String, String>();
 
                        // adding each child node to HashMap key => value
                        event.put(TAG_TITLE, the_title);
                        event.put(TAG_ID, the_id);
                        event.put(TAG_LOCATION, the_location);
                        event.put(TAG_DATE, the_date);
 
                        // adding event to event list
                        eventList.add(event);
                    }
                } catch (JSONException e) {
                    e.printStackTrace();
                }
            } else {
                Log.e("ServiceHandler", "Couldn't get any data from the url");
            }
 
            return null;
        }
        
        @Override
        protected void onPostExecute(Void result) 
        {
            super.onPostExecute(result);
            
            // Dismiss the progress dialog
            progress.dismiss();

            ListAdapter adapter = new SimpleAdapter( EventList.this, eventList,
                    R.layout.list_item, new String[] { TAG_TITLE, TAG_ID, TAG_LOCATION, TAG_DATE}, 
                    new int[] {R.id.the_title, R.id.the_id, R.id.the_location, R.id.the_date});

            setListAdapter(adapter);
        }
    }
    
    //________________________________________________________________________________________
    //filter events
    private class FilterEvents extends AsyncTask<String, Integer, String> 
    {
    	private ProgressDialog progress;  //progress dialog when loading events
    	
        @Override
        protected void onPreExecute() 
        {
            super.onPreExecute();
            eventList.clear();
            // Showing progress dialog
            progress = ProgressDialog.show(EventList.this, "Filtering", "Please Wait...");
        }
 
        @Override
        protected String doInBackground(String... params)
        {
        	// Creating connection handler class instance
            HandleConnections sh = new HandleConnections();
	    	
	        // Send the users entered parameters to the PHP script through POST
			List<NameValuePair> nameValuePairs = new ArrayList<NameValuePair>();
			nameValuePairs.add(new BasicNameValuePair("filter", filterby));
			
			//send inputted data to the the PHP script
			String jsonStr = sh.makeServiceCall(filter_url, HandleConnections.POST, nameValuePairs);
			
			if (jsonStr != null) 
            {
                try {
                    JSONObject jsonObj = new JSONObject(jsonStr);
                     
                    // Getting JSON Array node
                    events = jsonObj.getJSONArray(TAG_EVENTS);
 
                    // looping through all events
                    for (int i = 0; i < events.length(); i++) 
                    {
                        JSONObject c = events.getJSONObject(i);
                         
                        String the_id = c.getString(TAG_ID);
                        String the_title = c.getString(TAG_TITLE);
                        String the_date = c.getString(TAG_DATE);
                        String the_location = c.getString(TAG_LOCATION);
 
                        // tmp hashmap for single event
                        HashMap<String, String> event = new HashMap<String, String>();
 
                        // adding each child node to HashMap key => value
                        event.put(TAG_TITLE, the_title);
                        event.put(TAG_ID, the_id);
                        event.put(TAG_LOCATION, the_location);
                        event.put(TAG_DATE, the_date);
 
                        // adding contact to event list
                        eventList.add(event);
                    }
                } catch (JSONException e) {
                    e.printStackTrace();
                }
            } else {
                Log.e("ServiceHandler", "Couldn't get any data from the url");
            }
 
            return null;
        }
        
        @Override
        protected void onPostExecute(String result) 
        {
            super.onPostExecute(result);
            
            // if the filter contains no events, let the user know
            if(eventList.isEmpty())
            {
            	Log.i("EMPTY", "Nothing here to see..");
            	
            }
            
            // clear the filter variable
            filterby = "";
            
            // Dismiss the progress dialog
            progress.dismiss();

            ListAdapter adapter = new SimpleAdapter( EventList.this, eventList,
                    R.layout.list_item, new String[] { TAG_TITLE, TAG_ID, TAG_LOCATION, TAG_DATE}, 
                    new int[] {R.id.the_title, R.id.the_id, R.id.the_location, R.id.the_date});

            setListAdapter(adapter);
        }
    }
    //________________________________________________________________________________________
    
    //action bar
    @SuppressLint("NewApi")
	@Override
	public boolean onCreateOptionsMenu(Menu menu) 
	{
    	// Inflate menu resource file.  
        getMenuInflater().inflate(R.menu.eventlist_menu, menu);  

        return true;
	}
    
    //action bar listener
    @Override
    public boolean onOptionsItemSelected(MenuItem item) 
    {
    	int id = item.getItemId();
    	
    	if(id == R.id.filter_events)
    	{
    		List<String> list = new ArrayList<String>();
    		String[] the_locations = getResources().getStringArray(R.array.locations);
    		
    		// populate the list with the string array values
    		for(int i=0; i<the_locations.length; i++)
    		{
    			list.add(the_locations[i]);
    		}
    		list.add(0, "No filter");
    		
    		final CharSequence[] locations_items = getResources().getStringArray(R.array.locations);
    		
    		AlertDialog.Builder builder2 = new AlertDialog.Builder(EventList.this)
    		.setTitle("Filter by")
    		.setSingleChoiceItems(locations_items, -1, new DialogInterface.OnClickListener() 
    		{
	    		@Override
	    		public void onClick(DialogInterface dialog, int which)
	    		{
		    		// Get the users selection and begin the filter task based on the selection
		    		filterby = locations_items[which].toString();
		    		
		    		if(filterby == "")
		    		{
		    			Toast.makeText(getApplicationContext(),
					    		"Their are currently no events with this selection", Toast.LENGTH_SHORT).show();
		    		}
		    		else
		    		{
			    		if(filterby == locations_items[0].toString())
			    			new GetEvents().execute();
			    		else
			    		{
			    			new FilterEvents().execute();
			    			// TODO Auto-generated method stub
				    		Toast.makeText(getApplicationContext(),
				    		"Their are currently no events with this selection", Toast.LENGTH_SHORT).show();
			    		}
		    		}
		    		
		    		//dismissing the dialog when the user makes a selection
		    		dialog.dismiss();
	    		}
    		});
    		builder2.show();
    	}
        return true;
    }
    
    //back button pressed by user
    @Override
    public void onBackPressed() 
    {
        finish();//go back to the previous Activity
        overridePendingTransition(R.anim.slide_in_right_to_left, R.anim.slide_out_right_to_left);   
    }
}