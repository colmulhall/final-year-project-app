/* This is where the events are retrieved from the database and 
 * put into a list for the user to view.
 */

package com.phoenixpark.app;

import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.NameValuePair;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.HttpClient;
import org.apache.http.client.entity.UrlEncodedFormEntity;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.message.BasicNameValuePair;
import org.apache.http.util.EntityUtils;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import android.app.ListActivity;
import android.app.ProgressDialog;
import android.content.Intent;
import android.os.AsyncTask;
import android.os.Bundle;
import android.util.Log;
import android.view.View;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.ListAdapter;
import android.widget.ListView;
import android.widget.SimpleAdapter;
import android.widget.TextView;

public class EventList extends ListActivity 
{
	// URL to get contacts JSON
    private static String url = "http://10.0.2.2/FYP-Web-Coding/android_get_titles.php";
 
    // JSON Node names
    private static final String TAG_EVENTS = "event_list";
    private static final String TAG_ID = "id";
    private static final String TAG_TITLE = "title";
    private static final String TAG_DATE = "date";
 
    // contacts JSONArray
    JSONArray events = null;
 
    // Hashmap for ListView
    ArrayList<HashMap<String, String>> eventList;
 
    @Override
    public void onCreate(Bundle savedInstanceState) 
    {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.eventlist_layout);
 
        eventList = new ArrayList<HashMap<String, String>>();
 
        ListView lv = getListView();
        
        // Listview on item click listener
        lv.setOnItemClickListener(new OnItemClickListener() 
        {
            @Override
            public void onItemClick(AdapterView<?> parent, View view, int position, long id) 
            {
                // get id from selected ListItem
                String ev_id = ((TextView) view.findViewById(R.id.the_id)).getText().toString();
 
                // Starting single contact activity
                Intent in = new Intent(getApplicationContext(), EventInformation.class);
                in.putExtra(TAG_ID, ev_id);
                startActivity(in);
            }
        });
        
        String text = "37";
	    new UploadTask().execute(text);
 
        
    }
    
    private class UploadTask extends AsyncTask<String, Integer, String> 
    {
	    private ProgressDialog progressDialog;
	    @Override
	    protected void onPreExecute()
	    {
	        progressDialog = new ProgressDialog(EventList.this);
	        progressDialog.setMessage("Uploading...");
	        progressDialog.setCancelable(false);
	        progressDialog.setIndeterminate(true);
	        progressDialog.show();
	        super.onPreExecute();
	    }
	
	    @Override
	    protected String doInBackground(String... params) 
	    {
	        HttpClient httpclient = new DefaultHttpClient();
	        HttpPost httppost = new HttpPost(url);
	
	        try {
	            // Add your data
	            List<NameValuePair> nameValuePairs = new ArrayList<NameValuePair>(2);
	            nameValuePairs.add(new BasicNameValuePair("id", "37"));
	
	            httppost.setEntity(new UrlEncodedFormEntity(nameValuePairs));
	
	            // Execute HTTP Post Request
	            HttpResponse response = httpclient.execute(httppost);
	            HttpEntity resEntity = response.getEntity();

	            if (resEntity != null)
	            {
	                String responseStr = EntityUtils.toString(resEntity).trim();
	                Log.v("TAG", "Response: " +  responseStr);
	                return responseStr;
	            }
	            
	        } catch (ClientProtocolException e) {
	            e.printStackTrace();
	        } catch (IOException e) {
	            e.printStackTrace();
	        }

	        return null;
	    }
	    
	    @Override
	    protected void onPostExecute(String result) 
	    {
	        if (progressDialog != null) {
	            progressDialog.dismiss();
	        }
	        // process the result
	        super.onPostExecute(result);
	        
	        // Calling async task to get json
	        new GetEvents().execute();
	    }
    }
 
    //Async task class to get json by making HTTP call
    private class GetEvents extends AsyncTask<Void, Void, Void> 
    {
    	private ProgressDialog progress;  //progress dialog when loading events
    	
        @Override
        protected void onPreExecute() 
        {
            super.onPreExecute();
            // Showing progress dialog
            progress = ProgressDialog.show(EventList.this, "Getting events", "Please Wait...");
        }
 
        @Override
        protected Void doInBackground(Void... arg0) 
        {
            // Creating service handler class instance
            ServiceHandler sh = new ServiceHandler();
 
            // Making a request to url and getting response
            String jsonStr = sh.makeServiceCall(url, ServiceHandler.GET);
 
            Log.d("Response: ", "> " + jsonStr);
            HttpClient httpclient = new DefaultHttpClient();
	        HttpPost httppost = new HttpPost(url);
 
            if (jsonStr != null) 
            {
                try {
                	
                	List<NameValuePair> nameValuePairs = new ArrayList<NameValuePair>(2);
    	            nameValuePairs.add(new BasicNameValuePair("id", "37"));
    	
    	            httppost.setEntity(new UrlEncodedFormEntity(nameValuePairs));
    	
    	            // Execute HTTP Post Request
    	            HttpResponse response = httpclient.execute(httppost);
    	            HttpEntity resEntity = response.getEntity();

    	            if (resEntity != null)
    	            {
    	                String responseStr = EntityUtils.toString(resEntity).trim();
    	                Log.v("TAG", "Response: " +  responseStr);
    	                return responseStr;
    	            }
    	            
    	            
                    JSONObject jsonObj = new JSONObject(jsonStr);
                     
                    // Getting JSON Array node
                    events = jsonObj.getJSONArray(TAG_EVENTS);
 
                    // looping through All Contacts
                    for (int i = 0; i < events.length(); i++) 
                    {
                        JSONObject c = events.getJSONObject(i);
                         
                        String the_title = c.getString(TAG_TITLE);
                        String the_id = c.getString(TAG_ID);
                        String the_date = c.getString(TAG_DATE);
 
                        // tmp hashmap for single event
                        HashMap<String, String> event = new HashMap<String, String>();
 
                        // adding each child node to HashMap key => value
                        event.put(TAG_TITLE, the_title);
                        event.put(TAG_ID, the_id);
                        event.put(TAG_DATE, the_date);
 
                        // adding contact to event list
                        eventList.add(event);
                    }
                } catch (JSONException e) {
                    e.printStackTrace();
                }
            } else {
                Log.e("ServiceHandler", "Couldn't get any data from the url");
            }
 
            return null;
        }
 
        @Override
        protected void onPostExecute(Void result) 
        {
            super.onPostExecute(result);
            
            // Dismiss the progress dialog
            progress.dismiss();

            ListAdapter adapter = new SimpleAdapter( EventList.this, eventList,
                    R.layout.list_item, new String[] { TAG_TITLE, TAG_ID, TAG_DATE}, new int[] { R.id.the_title,
                            R.id.the_id, R.id.the_date});
 
            setListAdapter(adapter);
        }
    }
}