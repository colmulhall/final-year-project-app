package com.phoenixpark.app;

import java.util.ArrayList;
import java.util.HashMap;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;
import android.app.ListActivity;
import android.app.ProgressDialog;
import android.os.AsyncTask;
import android.os.Bundle;
import android.view.View;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.ListAdapter;
import android.widget.ListView;
import android.widget.SimpleAdapter;

public class EventList extends ListActivity {

	// Progress Dialog
	private ProgressDialog pDialog;

	private static final String url = "http://10.0.2.2/FYP-Web-Coding/android_connect.php";

	private static final String TAG_TITLE = "title";

	// An array of all of our comments
	private JSONArray mEvents = null;
	// manages all of our comments in a list.
	private ArrayList<HashMap<String, String>> mEventList;

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		// note that use read_comments.xml instead of our single_post.xml
		setContentView(R.layout.eventlist_layout);
	}

	@Override
	protected void onResume() {
		// TODO Auto-generated method stub
		super.onResume();
		// loading the events via AsyncTask
		new LoadEvents().execute();
	}
	
	/**
	 * Retrieves recent post data from the server.
	 */
	public void updateJSONdata() 
	{
		mEventList = new ArrayList<HashMap<String, String>>();

		// Bro, it's time to power up the J parser
		JSONParser jParser = new JSONParser();
		// Feed the beast our comments url, and it spits us
		// back a JSON object. Boo-yeah Jerome.
		JSONArray json = jParser.getJSONFromUrl(url);

		// when parsing JSON stuff, we should probably
		// try to catch any exceptions:
		try {

			mEvents = json.getJSONArray(TAG_TITLE);

			// looping through all posts according to the json object returned
			for (int i = 0; i < mEvents.length(); i++) {
				JSONObject c = mEvents.getJSONObject(i);

				// gets the content of each tag
				String title = c.getString(TAG_TITLE);
				// creating new HashMap
				HashMap<String, String> map = new HashMap<String, String>();

				map.put(TAG_TITLE, title);

				// adding HashList to ArrayList
				mEventList.add(map);

				// annndddd, our JSON data is up to date same with our array
				// list
			}

		} catch (JSONException e) {
			e.printStackTrace();
		}
	}

	/**
	 * Inserts the parsed data into the listview.
	 */
	private void updateList() 
	{
		//ListAdapter adapter = new SimpleAdapter(this, mEvents,
			//	R.layout.single_list_item, new String[] { TAG_TITLE, TAG_DESC }, new int[] { R.id.title, R.id.description});
		ListAdapter adapter = new SimpleAdapter(this, mEventList, R.layout.single_list_item, 
				new String[] {TAG_TITLE}, new int[] {R.id.title});

		// I shouldn't have to comment on this one:
		setListAdapter(adapter);
		
		// Optional: when the user clicks a list item we 
		//could do something.  However, we will choose
		//to do nothing...
		ListView lv = getListView();	
		lv.setOnItemClickListener(new OnItemClickListener() {

			@Override
			public void onItemClick(AdapterView<?> parent, View view, int position, long id) 
			{
				//do stuff on the item click here
			}
		});
	}

	public class LoadEvents extends AsyncTask<Void, Void, Boolean> 
	{

		@Override
		protected void onPreExecute() 
		{
			super.onPreExecute();
			pDialog = new ProgressDialog(EventList.this);
			pDialog.setMessage("Loading Events...");
			pDialog.setIndeterminate(false);
			pDialog.setCancelable(true);
			pDialog.show();
		}

		@Override
		protected Boolean doInBackground(Void... arg0) 
		{
			updateJSONdata();
			return null;

		}

		@Override
		protected void onPostExecute(Boolean result) {
			super.onPostExecute(result);
			pDialog.dismiss();
			updateList();
		}
	}
}